{"version":3,"sources":["utils/API.js","pages/Home/Home.js","chat/chat.js","App.js","serviceWorker.js","index.js"],"names":["API","getJWT","localStorage","getItem","setJWT","token","setItem","login","email","password","axios","post","then","response","data","Promise","resolve","logout","removeItem","window","location","getUserId","getUser","id","JWToken","this","get","headers","Authorization","catch","err","status","console","log","reject","deleteUser","delete","saveUser","userData","updateUser","_id","userDataNew","firstName","lastName","address","city","state","zip","phone","put","getTasks","getTask","deleteTask","saveTask","taskListData","saveUserTasks","getUserTasks","updateTask","taskListDataNew","Home","handleInputChange","event","value","target","name","substring","setState","handleFormSubmit","preventDefault","res","message","alert","sub","className","href","type","placheholder","onChange","for","onClick","Component","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ChatComponent","React","App","exact","path","component","Signup","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0941a53b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API = {\n  getJWT() {\n    return localStorage.getItem(\"JWToken\");\n  },\n  setJWT(token) {\n    localStorage.setItem(\"JWToken\", token);\n  },\n  login({ email, password }) {\n    return axios.post(\"/api/login\", { email, password })\n      .then((response) => {\n        if (response.data.token) {\n          this.setJWT(response.data.token);\n        }\n        return Promise.resolve(response);\n      });\n  },\n  logout() {\n    localStorage.removeItem(\"JWToken\");\n    window.location = \"/\";\n  },\n  getUserId() {\n\n  },\n  // Gets the user with the given id\n  getUser(id) {\n\n    let JWToken = this.getJWT();\n\n    return axios.get(\"/api/user/\" + id,\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        console.log(\"Unauthorized\");\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n\n\n  // Deletes the user with the given id\n  deleteUser(id) {\n    let JWToken = this.getJWT();\n\n    return axios.delete(\"/api/user/\" + id,\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        console.log(\"Unauthorized\");\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n\n\n  // Saves a user to the database\n  saveUser(userData) {\n    return axios.post(\"/api/user\", userData);\n  },\n  // BEGIN MY CODE FOR UPDATING (added comma above also)\n  // Updates a taskList in the database\n  updateUser(userData) {\n    let id = userData._id;\n    let userDataNew = {\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      email: userData.email,\n      password: userData.password,\n      address: userData.address,\n      city: userData.city,\n      state: userData.state,\n      zip: userData.zip,\n      phone: userData.phone,\n\n    };\n    let JWToken = this.getJWT();\n\n    return axios.put(\"/api/user/\" + id, userDataNew,\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n\n  getTasks() {\n    let JWToken = this.getJWT();\n\n    return axios.get(\"/api/tasklist\",\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        console.log(\"Unauthorized\");\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n  // Gets the taskList with the given id\n  getTask(id) {\n    let JWToken = this.getJWT();\n\n    return axios.get(\"/api/tasklist/\" + id,\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        console.log(\"Unauthorized\");\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n\n  // Deletes the taskList with the given id\n  deleteTask(id) {\n    let JWToken = this.getJWT();\n\n    return axios.delete(\"/api/tasklist/\" + id,\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        console.log(\"Unauthorized\");\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n  // Saves a taskList to the database\n  saveTask(taskListData) {\n    let JWToken = this.getJWT();\n\n    return axios.post(\"/api/tasklist\", taskListData,\n      {\n        headers: {\n          Authorization: `Bearer ${JWToken}`\n        }\n      }\n    ).catch(err => {\n      if (err.response.status === 401) {\n        console.log(\"Unauthorized\");\n        this.logout();\n      }\n      return Promise.reject(err);\n    });\n  },\n\n\n  //saving the specific user to each task\n  saveUserTasks: function(taskListData){\n    let id = taskListData.id;\n    return axios.put(\"/api/usertasklist/\" + id , taskListData);\n  },\n\n  getUserTasks: function(id) {\n    return axios.get(\"/api/usertasklist/\" + id);\n  },\n\n\n  // BEGIN MY CODE FOR UPDATING (added comma above also)\n  // Updates a taskList in the database\n  updateTask(taskListDataNew) {\n    let JWToken = this.getJWT();\n\n    let id = taskListDataNew._id;\n\n  \n  return axios.put(\"/api/tasklist/\" + id, taskListDataNew,\n    {\n      headers: {\n        Authorization: `Bearer ${JWToken}`\n      }\n    }\n  ).catch(err => {\n    if (err.response.status === 401) {\n      console.log(\"Unauthorized\");\n      this.logout();\n    }\n    return Promise.reject(err);\n  });\n},\n\n\n  // END MY CODE FOR UPDATING\n};\n\nexport default API;","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\n\nclass Home extends Component {\n    state = {\n        email: '',\n        password: '',\n\n    };\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        let value = event.target.value;\n        const name = event.target.name;\n        if (name === \"password\") {\n            value = value.substring(0, 30);\n        }\n        // Updating the input's state\n        this.setState({\n            [name]: value\n        });\n    };\n    handleFormSubmit = event => {\n        // Preventing the default behavior of the form submit (which is to refresh the page)\n\n        event.preventDefault();\n        if (!this.state.email || !this.state.password) {\n            alert(\"Please enter your email and password to login\");\n            return\n        }\n\n        API.login({\n            email: this.state.email,\n            password: this.state.password\n        })\n            .then(res => {\n                if (res.data.message) {\n                    alert(res.data.message);\n                } else {\n                    window.location = \"/profile/\" + res.data.sub\n                }\n            })\n            .catch(err => console.log(err));\n\n        this.setState({\n            email: '',\n            password: '',\n        });\n    }\n    render() {\n        return (\n            <div className=\"bg\">\n\n                <nav className=\"transparent z-depth-0\">\n                    <div className=\"nav-wrapper\">\n                        <ul id=\"nav-mobile\" className=\"right\">\n                            <li><a href=\"/Signup\" className=\"blue-grey-text darken-10-text\">Sign Up</a></li>\n                        </ul>\n                    </div>\n                </nav>\n\n                <div className=\"container blur homeForm\">\n                    <div className=\"row\">\n                        <form className=\"col s12\">\n                            <div className=\"row\">\n                                <div className=\"input-field col s6\">\n                                    <input\n                                        name='email'\n                                        type='email'\n                                        placheholder='abc@domain.com'\n                                        value={this.state.email}\n                                        onChange={this.handleInputChange}\n                                    />\n                                    <label for=\"email\" className=\"teal-text accent-4-text\">Email</label>\n                                </div>\n                                <div className=\"input-field col s6\">\n                                    <input\n                                        name='password'\n                                        type='password'\n                                        placheholder='******'\n                                        value={this.state.password}\n                                        onChange={this.handleInputChange}\n                                    />\n                                    <label for=\"password\" className=\"teal-text accent-4-text\">Password</label>\n                                </div>\n                            </div>\n\n                            <div className=\"center-align\">\n                                <button className=\"btn waves-effect waves-light\" id=\"loginBtn\" onClick={this.handleFormSubmit}>Log In</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from \"react\";\n\n\n\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyBSlVnwMk5kaOT-q9jsqIx6B7kV4KkXXvI\",\n    authDomain: \"project3message.firebaseapp.com\",\n    databaseURL: \"https://project3message.firebaseio.com\",\n    projectId: \"project3message\",\n    storageBucket: \"project3message.appspot.com\",\n    messagingSenderId: \"965192004402\",\n    appId: \"1:965192004402:web:705bb442d0491e98855d2b\",\n    measurementId: \"G-R0LS8X4W5L\"\n});\n\nclass ChatComponent extends React.Component {\n\n    render(){\n        return(<div>Hello World from Chat</div>)\n    }\n\n}\n\nexport default ChatComponent;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home/Home\";\nimport Signup from \"./pages/signup/Signup\";\nimport ChatComponent from \"./chat/chat\";\n\nconst App = () => {\n  return(\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/signup\" component={Signup} />\n          <Route path=\"/chat\" component={ChatComponent}>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n};\n  \n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from\"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}